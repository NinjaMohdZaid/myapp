{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","class","onClick","toggleMode1","htmlFor","toggleMode2","toggleMode","Textform","useState","text","setText","heading","style","backgroundColor","color","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3b94c768.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"/navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/About\">About</a>\r\n            </li> */}\r\n          </ul>\r\n          <div class={`form-check form-switch mx-2 text-${props.mode==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input bg-success\" onClick={props.toggleMode1} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Green DarkMode</label>\r\n          </div>\r\n          <div class={`form-check form-switch mx-2 text-${props.mode==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input bg-danger\" onClick={props.toggleMode2} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Red DarkMode</label>\r\n          </div>\r\n          <div class={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input bg-primary\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Blue DarkMode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n  link: PropTypes.string\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nexport default function Textform(props) {\r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase\",\"success\");\r\n\r\n    }\r\n    const handleLowClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase\",\"success\");\r\n    }\r\n    const handleClearClick = () => {\r\n        setText(\"\");\r\n        props.showAlert(\"Text Cleared\",\"success\");\r\n    }\r\n    const handleCopyClick=()=>\r\n    {\r\n       var text =document.getElementById('myBox');\r\n       text.select();\r\n       navigator.clipboard.writeText(text.value);\r\n       props.showAlert(\"Text Copied\",\"success\");\r\n    }\r\n    // const handleZigZacClick=()=>\r\n    // {\r\n    //     let newText=text;\r\n    //    for(let i=0;i<text.length;i++)\r\n    //    {   \r\n    //        if(i%2===0)\r\n    //        {\r\n    //             let newChar=text.charAt(i).toLowerCase();\r\n    //             newText=text.replace(text.charAt(i),newChar);\r\n    //        }\r\n    //        else{\r\n    //         let newChar=text.charAt(i).toUpperCase();\r\n    //         newText=text.replace(text.charAt(i),newChar);\r\n    //        }\r\n    //    }\r\n    //    setText(newText);\r\n    // }\r\n    const handleRemoveSpacesClick=()=>\r\n    {\r\n        let newText=text.split(/[ ]+/);//this topic is remained from my side to learn\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Removed Extra spaces\",\"success\");\r\n\r\n    }\r\n\r\n\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n    const [text, setText] = useState('');\r\n    // setText(\"new Text\");\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <h1 className={`text-${props.mode==='light'?'dark':'light'}`}>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" style={{backgroundColor:props.mode==='dark'?'gray':'white',color:props.mode==='dark'?'white':'black'}} value={text} onChange={handleOnChange} id=\"myBox\" rows=\"6\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary\" onClick={handleUpClick}>\r\n                    Convert To Uppercase\r\n                </button>\r\n                <button className=\"btn btn-danger mx-2\" onClick={handleLowClick} >\r\n                    Convert To Lowercase\r\n                </button>\r\n                <button className=\"btn btn-secondary mx-2\" onClick={handleClearClick} >\r\n                    Clear Text\r\n                </button>\r\n                <button className=\"btn btn-info mx-2\" onClick={handleCopyClick} >\r\n                    Copy Text\r\n                </button>\r\n                {/* <button className=\"btn btn-info mx-2\" onClick={handleZigZacClick} >\r\n                    zIg ZaC tExT\r\n                </button> */}\r\n                <button className=\"btn btn-warning mx-2\" onClick={handleRemoveSpacesClick} >\r\n                   Remove Extra Spaces \r\n                </button>\r\n                \r\n\r\n            </div>\r\n            <div className=\"container my-3\">\r\n                  <h2 className={`text-${props.mode==='light'?'dark':'light'}`}>Your Text Summary</h2>\r\n                  <p className=\"text-primary\"><b>{text.split(\" \").length} Words , {text.length} Characters</b></p>\r\n                  <p className=\"text-danger\"><b>{0.008 * text.split(\" \").length} Minutes Read</b></p>\r\n                  <p className={`text-${props.mode==='light'?'dark':'light'}`}><b>{text.split(\".\").length} Sentance</b></p>\r\n\r\n                  <h2 className={`text-${props.mode==='light'?'dark':'light'}`}>Priview</h2>\r\n                  <p className=\"text-warning\">{text.length>0?text:\"Enter some text to priview here\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize=(word)=>\r\n    {\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import About from './components/About';\nimport Alert from './components/Alert';\nimport React, { useState } from 'react';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n// import About from './components/About';\nfunction App() {\n  const [mode, setMode] = useState('light');// whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert(\n      {\n        msg: message,\n        type: type\n      }\n    )\n    setTimeout(() => {\n      setAlert(null);\n\n    }, 1500);\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = \"#042743\";\n      // document.body.style.caretColor=\"red\";\n      showAlert(\"Dark mode has been Enabled\", \"success\");\n      document.title = \"TextUtils-Home-Dark-Mode\";\n      // setInterval(() => {\n      //   document.title=\"TextUtils-Warning\";\n\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title=\"TextUtils-Virus Detected\";\n\n      // }, 1500);\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been Enabled\", \"success\");\n      document.title = \"TextUtils-Home-Light-Mode\";\n    }\n  }\n  const toggleMode1 = () => {\n    if (mode !== 'dark') {\n      setMode('dark');\n      document.body.style.backgroundColor = \"rgb(18 52 19)\";\n      // document.body.style.caretColor=\"red\";\n      showAlert(\"Dark mode has been Enabled\", \"success\");\n      document.title = \"TextUtils-Home-Green-Dark-Mode\";\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been Enabled\", \"success\");\n      document.title = \"TextUtils-Home-Light-Mode\";\n    }\n  }\n  const toggleMode2 = () => {\n    if (mode !== 'dark') {\n      setMode('dark');\n      document.body.style.backgroundColor = \"rgb(69 13 13)\";\n      // document.body.style.caretColor=\"red\";\n      showAlert(\"Dark mode has been Enabled\", \"success\");\n      document.title = \"TextUtils-Home-Red-Dark-Mode\";\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been Enabled\", \"success\");\n      document.title = \"TextUtils-Home-Light-Mode\";\n    }\n  }\n\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} toggleMode1={toggleMode1} toggleMode2={toggleMode2} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Switch> */}\n          {/* <Route exact path=\"/About\">\n            <About />\n          </Route> */}\n          {/* <Route exact path=\"/\"> */}\n            <TextForm heading=\"Enter your text to anlyze\" showAlert={showAlert} mode={mode} />\n          {/* </Route>\n        </Switch> */}\n      </div>\n    {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}